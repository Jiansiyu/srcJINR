//
// File generated by /opt/fairsoft/install/bin/rootcint at Tue Dec  2 12:02:49 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dIhomedImerzdIBMNdIGITdItrunk_220814dIbuilddIpassivedIG__PassiveDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "G__PassiveDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void FairCave_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairCave(void *p = 0);
   static void *newArray_FairCave(Long_t size, void *p);
   static void delete_FairCave(void *p);
   static void deleteArray_FairCave(void *p);
   static void destruct_FairCave(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairCave*)
   {
      ::FairCave *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairCave >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairCave", ::FairCave::Class_Version(), "/home/merz/BMN/GIT/trunk_220814/passive/FairCave.h", 9,
                  typeid(::FairCave), DefineBehavior(ptr, ptr),
                  &::FairCave::Dictionary, isa_proxy, 4,
                  sizeof(::FairCave) );
      instance.SetNew(&new_FairCave);
      instance.SetNewArray(&newArray_FairCave);
      instance.SetDelete(&delete_FairCave);
      instance.SetDeleteArray(&deleteArray_FairCave);
      instance.SetDestructor(&destruct_FairCave);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairCave*)
   {
      return GenerateInitInstanceLocal((::FairCave*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairCave*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoCave_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoCave(void *p = 0);
   static void *newArray_FairGeoCave(Long_t size, void *p);
   static void delete_FairGeoCave(void *p);
   static void deleteArray_FairGeoCave(void *p);
   static void destruct_FairGeoCave(void *p);
   static void streamer_FairGeoCave(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoCave*)
   {
      ::FairGeoCave *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoCave >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoCave", ::FairGeoCave::Class_Version(), "/home/merz/BMN/GIT/trunk_220814/passive/FairGeoCave.h", 9,
                  typeid(::FairGeoCave), DefineBehavior(ptr, ptr),
                  &::FairGeoCave::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoCave) );
      instance.SetNew(&new_FairGeoCave);
      instance.SetNewArray(&newArray_FairGeoCave);
      instance.SetDelete(&delete_FairGeoCave);
      instance.SetDeleteArray(&deleteArray_FairGeoCave);
      instance.SetDestructor(&destruct_FairGeoCave);
      instance.SetStreamerFunc(&streamer_FairGeoCave);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoCave*)
   {
      return GenerateInitInstanceLocal((::FairGeoCave*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoCave*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoMagnet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoMagnet(void *p = 0);
   static void *newArray_FairGeoMagnet(Long_t size, void *p);
   static void delete_FairGeoMagnet(void *p);
   static void deleteArray_FairGeoMagnet(void *p);
   static void destruct_FairGeoMagnet(void *p);
   static void streamer_FairGeoMagnet(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoMagnet*)
   {
      ::FairGeoMagnet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoMagnet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoMagnet", ::FairGeoMagnet::Class_Version(), "/home/merz/BMN/GIT/trunk_220814/passive/FairGeoMagnet.h", 8,
                  typeid(::FairGeoMagnet), DefineBehavior(ptr, ptr),
                  &::FairGeoMagnet::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoMagnet) );
      instance.SetNew(&new_FairGeoMagnet);
      instance.SetNewArray(&newArray_FairGeoMagnet);
      instance.SetDelete(&delete_FairGeoMagnet);
      instance.SetDeleteArray(&deleteArray_FairGeoMagnet);
      instance.SetDestructor(&destruct_FairGeoMagnet);
      instance.SetStreamerFunc(&streamer_FairGeoMagnet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoMagnet*)
   {
      return GenerateInitInstanceLocal((::FairGeoMagnet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoMagnet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoPassivePar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoPassivePar(void *p = 0);
   static void *newArray_FairGeoPassivePar(Long_t size, void *p);
   static void delete_FairGeoPassivePar(void *p);
   static void deleteArray_FairGeoPassivePar(void *p);
   static void destruct_FairGeoPassivePar(void *p);
   static void streamer_FairGeoPassivePar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoPassivePar*)
   {
      ::FairGeoPassivePar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoPassivePar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoPassivePar", ::FairGeoPassivePar::Class_Version(), "/home/merz/BMN/GIT/trunk_220814/passive/FairGeoPassivePar.h", 8,
                  typeid(::FairGeoPassivePar), DefineBehavior(ptr, ptr),
                  &::FairGeoPassivePar::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoPassivePar) );
      instance.SetNew(&new_FairGeoPassivePar);
      instance.SetNewArray(&newArray_FairGeoPassivePar);
      instance.SetDelete(&delete_FairGeoPassivePar);
      instance.SetDeleteArray(&deleteArray_FairGeoPassivePar);
      instance.SetDestructor(&destruct_FairGeoPassivePar);
      instance.SetStreamerFunc(&streamer_FairGeoPassivePar);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoPassivePar*)
   {
      return GenerateInitInstanceLocal((::FairGeoPassivePar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoPassivePar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoPipe_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoPipe(void *p = 0);
   static void *newArray_FairGeoPipe(Long_t size, void *p);
   static void delete_FairGeoPipe(void *p);
   static void deleteArray_FairGeoPipe(void *p);
   static void destruct_FairGeoPipe(void *p);
   static void streamer_FairGeoPipe(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoPipe*)
   {
      ::FairGeoPipe *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoPipe >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoPipe", ::FairGeoPipe::Class_Version(), "/home/merz/BMN/GIT/trunk_220814/passive/FairGeoPipe.h", 7,
                  typeid(::FairGeoPipe), DefineBehavior(ptr, ptr),
                  &::FairGeoPipe::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoPipe) );
      instance.SetNew(&new_FairGeoPipe);
      instance.SetNewArray(&newArray_FairGeoPipe);
      instance.SetDelete(&delete_FairGeoPipe);
      instance.SetDeleteArray(&deleteArray_FairGeoPipe);
      instance.SetDestructor(&destruct_FairGeoPipe);
      instance.SetStreamerFunc(&streamer_FairGeoPipe);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoPipe*)
   {
      return GenerateInitInstanceLocal((::FairGeoPipe*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoPipe*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairGeoTarget_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairGeoTarget(void *p = 0);
   static void *newArray_FairGeoTarget(Long_t size, void *p);
   static void delete_FairGeoTarget(void *p);
   static void deleteArray_FairGeoTarget(void *p);
   static void destruct_FairGeoTarget(void *p);
   static void streamer_FairGeoTarget(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairGeoTarget*)
   {
      ::FairGeoTarget *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairGeoTarget >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairGeoTarget", ::FairGeoTarget::Class_Version(), "/home/merz/BMN/GIT/trunk_220814/passive/FairGeoTarget.h", 7,
                  typeid(::FairGeoTarget), DefineBehavior(ptr, ptr),
                  &::FairGeoTarget::Dictionary, isa_proxy, 0,
                  sizeof(::FairGeoTarget) );
      instance.SetNew(&new_FairGeoTarget);
      instance.SetNewArray(&newArray_FairGeoTarget);
      instance.SetDelete(&delete_FairGeoTarget);
      instance.SetDeleteArray(&deleteArray_FairGeoTarget);
      instance.SetDestructor(&destruct_FairGeoTarget);
      instance.SetStreamerFunc(&streamer_FairGeoTarget);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairGeoTarget*)
   {
      return GenerateInitInstanceLocal((::FairGeoTarget*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairGeoTarget*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairMagnet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairMagnet(void *p = 0);
   static void *newArray_FairMagnet(Long_t size, void *p);
   static void delete_FairMagnet(void *p);
   static void deleteArray_FairMagnet(void *p);
   static void destruct_FairMagnet(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairMagnet*)
   {
      ::FairMagnet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairMagnet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairMagnet", ::FairMagnet::Class_Version(), "/home/merz/BMN/GIT/trunk_220814/passive/FairMagnet.h", 12,
                  typeid(::FairMagnet), DefineBehavior(ptr, ptr),
                  &::FairMagnet::Dictionary, isa_proxy, 4,
                  sizeof(::FairMagnet) );
      instance.SetNew(&new_FairMagnet);
      instance.SetNewArray(&newArray_FairMagnet);
      instance.SetDelete(&delete_FairMagnet);
      instance.SetDeleteArray(&deleteArray_FairMagnet);
      instance.SetDestructor(&destruct_FairMagnet);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairMagnet*)
   {
      return GenerateInitInstanceLocal((::FairMagnet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairMagnet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairPassiveContFact_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairPassiveContFact(void *p = 0);
   static void *newArray_FairPassiveContFact(Long_t size, void *p);
   static void delete_FairPassiveContFact(void *p);
   static void deleteArray_FairPassiveContFact(void *p);
   static void destruct_FairPassiveContFact(void *p);
   static void streamer_FairPassiveContFact(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairPassiveContFact*)
   {
      ::FairPassiveContFact *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairPassiveContFact >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairPassiveContFact", ::FairPassiveContFact::Class_Version(), "/home/merz/BMN/GIT/trunk_220814/passive/FairPassiveContFact.h", 9,
                  typeid(::FairPassiveContFact), DefineBehavior(ptr, ptr),
                  &::FairPassiveContFact::Dictionary, isa_proxy, 0,
                  sizeof(::FairPassiveContFact) );
      instance.SetNew(&new_FairPassiveContFact);
      instance.SetNewArray(&newArray_FairPassiveContFact);
      instance.SetDelete(&delete_FairPassiveContFact);
      instance.SetDeleteArray(&deleteArray_FairPassiveContFact);
      instance.SetDestructor(&destruct_FairPassiveContFact);
      instance.SetStreamerFunc(&streamer_FairPassiveContFact);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairPassiveContFact*)
   {
      return GenerateInitInstanceLocal((::FairPassiveContFact*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairPassiveContFact*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairPipe_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairPipe(void *p = 0);
   static void *newArray_FairPipe(Long_t size, void *p);
   static void delete_FairPipe(void *p);
   static void deleteArray_FairPipe(void *p);
   static void destruct_FairPipe(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairPipe*)
   {
      ::FairPipe *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairPipe >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairPipe", ::FairPipe::Class_Version(), "/home/merz/BMN/GIT/trunk_220814/passive/FairPipe.h", 12,
                  typeid(::FairPipe), DefineBehavior(ptr, ptr),
                  &::FairPipe::Dictionary, isa_proxy, 4,
                  sizeof(::FairPipe) );
      instance.SetNew(&new_FairPipe);
      instance.SetNewArray(&newArray_FairPipe);
      instance.SetDelete(&delete_FairPipe);
      instance.SetDeleteArray(&deleteArray_FairPipe);
      instance.SetDestructor(&destruct_FairPipe);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairPipe*)
   {
      return GenerateInitInstanceLocal((::FairPipe*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairPipe*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void FairTarget_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_FairTarget(void *p = 0);
   static void *newArray_FairTarget(Long_t size, void *p);
   static void delete_FairTarget(void *p);
   static void deleteArray_FairTarget(void *p);
   static void destruct_FairTarget(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::FairTarget*)
   {
      ::FairTarget *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::FairTarget >(0);
      static ::ROOT::TGenericClassInfo 
         instance("FairTarget", ::FairTarget::Class_Version(), "/home/merz/BMN/GIT/trunk_220814/passive/FairTarget.h", 8,
                  typeid(::FairTarget), DefineBehavior(ptr, ptr),
                  &::FairTarget::Dictionary, isa_proxy, 4,
                  sizeof(::FairTarget) );
      instance.SetNew(&new_FairTarget);
      instance.SetNewArray(&newArray_FairTarget);
      instance.SetDelete(&delete_FairTarget);
      instance.SetDeleteArray(&deleteArray_FairTarget);
      instance.SetDestructor(&destruct_FairTarget);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::FairTarget*)
   {
      return GenerateInitInstanceLocal((::FairTarget*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::FairTarget*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *FairCave::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairCave::Class_Name()
{
   return "FairCave";
}

//______________________________________________________________________________
const char *FairCave::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairCave*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairCave::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairCave*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairCave::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairCave*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairCave::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairCave*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoCave::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoCave::Class_Name()
{
   return "FairGeoCave";
}

//______________________________________________________________________________
const char *FairGeoCave::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoCave*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoCave::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoCave*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoCave::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoCave*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoCave::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoCave*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoMagnet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoMagnet::Class_Name()
{
   return "FairGeoMagnet";
}

//______________________________________________________________________________
const char *FairGeoMagnet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoMagnet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoMagnet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoMagnet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoMagnet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoMagnet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoMagnet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoMagnet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoPassivePar::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoPassivePar::Class_Name()
{
   return "FairGeoPassivePar";
}

//______________________________________________________________________________
const char *FairGeoPassivePar::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoPassivePar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoPassivePar::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoPassivePar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoPassivePar::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoPassivePar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoPassivePar::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoPassivePar*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoPipe::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoPipe::Class_Name()
{
   return "FairGeoPipe";
}

//______________________________________________________________________________
const char *FairGeoPipe::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoPipe*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoPipe::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoPipe*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoPipe::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoPipe*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoPipe::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoPipe*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairGeoTarget::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairGeoTarget::Class_Name()
{
   return "FairGeoTarget";
}

//______________________________________________________________________________
const char *FairGeoTarget::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoTarget*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairGeoTarget::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairGeoTarget*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairGeoTarget::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoTarget*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairGeoTarget::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairGeoTarget*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairMagnet::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairMagnet::Class_Name()
{
   return "FairMagnet";
}

//______________________________________________________________________________
const char *FairMagnet::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairMagnet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairMagnet::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairMagnet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairMagnet::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairMagnet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairMagnet::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairMagnet*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairPassiveContFact::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairPassiveContFact::Class_Name()
{
   return "FairPassiveContFact";
}

//______________________________________________________________________________
const char *FairPassiveContFact::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairPassiveContFact*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairPassiveContFact::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairPassiveContFact*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairPassiveContFact::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairPassiveContFact*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairPassiveContFact::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairPassiveContFact*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairPipe::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairPipe::Class_Name()
{
   return "FairPipe";
}

//______________________________________________________________________________
const char *FairPipe::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairPipe*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairPipe::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairPipe*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairPipe::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairPipe*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairPipe::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairPipe*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *FairTarget::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *FairTarget::Class_Name()
{
   return "FairTarget";
}

//______________________________________________________________________________
const char *FairTarget::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairTarget*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int FairTarget::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::FairTarget*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void FairTarget::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairTarget*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *FairTarget::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::FairTarget*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void FairMagnet::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairMagnet.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairMagnet::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairMagnet::Class(),this);
   }
}

//______________________________________________________________________________
void FairMagnet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairMagnet.
      TClass *R__cl = ::FairMagnet::IsA();
      if (R__cl || R__insp.IsA()) { }
      FairModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairMagnet(void *p) {
      return  p ? new(p) ::FairMagnet : new ::FairMagnet;
   }
   static void *newArray_FairMagnet(Long_t nElements, void *p) {
      return p ? new(p) ::FairMagnet[nElements] : new ::FairMagnet[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairMagnet(void *p) {
      delete ((::FairMagnet*)p);
   }
   static void deleteArray_FairMagnet(void *p) {
      delete [] ((::FairMagnet*)p);
   }
   static void destruct_FairMagnet(void *p) {
      typedef ::FairMagnet current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::FairMagnet

//______________________________________________________________________________
void FairTarget::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairTarget.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairTarget::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairTarget::Class(),this);
   }
}

//______________________________________________________________________________
void FairTarget::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairTarget.
      TClass *R__cl = ::FairTarget::IsA();
      if (R__cl || R__insp.IsA()) { }
      FairModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairTarget(void *p) {
      return  p ? new(p) ::FairTarget : new ::FairTarget;
   }
   static void *newArray_FairTarget(Long_t nElements, void *p) {
      return p ? new(p) ::FairTarget[nElements] : new ::FairTarget[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairTarget(void *p) {
      delete ((::FairTarget*)p);
   }
   static void deleteArray_FairTarget(void *p) {
      delete [] ((::FairTarget*)p);
   }
   static void destruct_FairTarget(void *p) {
      typedef ::FairTarget current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::FairTarget

//______________________________________________________________________________
void FairPipe::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairPipe.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairPipe::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairPipe::Class(),this);
   }
}

//______________________________________________________________________________
void FairPipe::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairPipe.
      TClass *R__cl = ::FairPipe::IsA();
      if (R__cl || R__insp.IsA()) { }
      FairModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairPipe(void *p) {
      return  p ? new(p) ::FairPipe : new ::FairPipe;
   }
   static void *newArray_FairPipe(Long_t nElements, void *p) {
      return p ? new(p) ::FairPipe[nElements] : new ::FairPipe[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairPipe(void *p) {
      delete ((::FairPipe*)p);
   }
   static void deleteArray_FairPipe(void *p) {
      delete [] ((::FairPipe*)p);
   }
   static void destruct_FairPipe(void *p) {
      typedef ::FairPipe current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::FairPipe

//______________________________________________________________________________
void FairCave::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairCave.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(FairCave::Class(),this);
   } else {
      R__b.WriteClassBuffer(FairCave::Class(),this);
   }
}

//______________________________________________________________________________
void FairCave::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairCave.
      TClass *R__cl = ::FairCave::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "world[3]", world);
      FairModule::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairCave(void *p) {
      return  p ? new(p) ::FairCave : new ::FairCave;
   }
   static void *newArray_FairCave(Long_t nElements, void *p) {
      return p ? new(p) ::FairCave[nElements] : new ::FairCave[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairCave(void *p) {
      delete ((::FairCave*)p);
   }
   static void deleteArray_FairCave(void *p) {
      delete [] ((::FairCave*)p);
   }
   static void destruct_FairCave(void *p) {
      typedef ::FairCave current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::FairCave

//______________________________________________________________________________
void FairGeoCave::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoCave.

   FairGeoSet::Streamer(R__b);
}

//______________________________________________________________________________
void FairGeoCave::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoCave.
      TClass *R__cl = ::FairGeoCave::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "name", &name);
      R__insp.InspectMember(name, "name.");
      FairGeoSet::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoCave(void *p) {
      return  p ? new(p) ::FairGeoCave : new ::FairGeoCave;
   }
   static void *newArray_FairGeoCave(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoCave[nElements] : new ::FairGeoCave[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoCave(void *p) {
      delete ((::FairGeoCave*)p);
   }
   static void deleteArray_FairGeoCave(void *p) {
      delete [] ((::FairGeoCave*)p);
   }
   static void destruct_FairGeoCave(void *p) {
      typedef ::FairGeoCave current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoCave(TBuffer &buf, void *obj) {
      ((::FairGeoCave*)obj)->::FairGeoCave::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoCave

//______________________________________________________________________________
void FairGeoPipe::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoPipe.

   FairGeoSet::Streamer(R__b);
}

//______________________________________________________________________________
void FairGeoPipe::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoPipe.
      TClass *R__cl = ::FairGeoPipe::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "modName[2]", modName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eleName[2]", eleName);
      FairGeoSet::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoPipe(void *p) {
      return  p ? new(p) ::FairGeoPipe : new ::FairGeoPipe;
   }
   static void *newArray_FairGeoPipe(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoPipe[nElements] : new ::FairGeoPipe[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoPipe(void *p) {
      delete ((::FairGeoPipe*)p);
   }
   static void deleteArray_FairGeoPipe(void *p) {
      delete [] ((::FairGeoPipe*)p);
   }
   static void destruct_FairGeoPipe(void *p) {
      typedef ::FairGeoPipe current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoPipe(TBuffer &buf, void *obj) {
      ((::FairGeoPipe*)obj)->::FairGeoPipe::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoPipe

//______________________________________________________________________________
void FairGeoTarget::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoTarget.

   FairGeoSet::Streamer(R__b);
}

//______________________________________________________________________________
void FairGeoTarget::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoTarget.
      TClass *R__cl = ::FairGeoTarget::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "modName[2]", modName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eleName[2]", eleName);
      FairGeoSet::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoTarget(void *p) {
      return  p ? new(p) ::FairGeoTarget : new ::FairGeoTarget;
   }
   static void *newArray_FairGeoTarget(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoTarget[nElements] : new ::FairGeoTarget[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoTarget(void *p) {
      delete ((::FairGeoTarget*)p);
   }
   static void deleteArray_FairGeoTarget(void *p) {
      delete [] ((::FairGeoTarget*)p);
   }
   static void destruct_FairGeoTarget(void *p) {
      typedef ::FairGeoTarget current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoTarget(TBuffer &buf, void *obj) {
      ((::FairGeoTarget*)obj)->::FairGeoTarget::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoTarget

//______________________________________________________________________________
void FairGeoMagnet::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoMagnet.

   FairGeoSet::Streamer(R__b);
}

//______________________________________________________________________________
void FairGeoMagnet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoMagnet.
      TClass *R__cl = ::FairGeoMagnet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "modName[2]", modName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eleName[2]", eleName);
      FairGeoSet::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoMagnet(void *p) {
      return  p ? new(p) ::FairGeoMagnet : new ::FairGeoMagnet;
   }
   static void *newArray_FairGeoMagnet(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoMagnet[nElements] : new ::FairGeoMagnet[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoMagnet(void *p) {
      delete ((::FairGeoMagnet*)p);
   }
   static void deleteArray_FairGeoMagnet(void *p) {
      delete [] ((::FairGeoMagnet*)p);
   }
   static void destruct_FairGeoMagnet(void *p) {
      typedef ::FairGeoMagnet current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoMagnet(TBuffer &buf, void *obj) {
      ((::FairGeoMagnet*)obj)->::FairGeoMagnet::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoMagnet

//______________________________________________________________________________
void FairGeoPassivePar::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairGeoPassivePar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      FairParGenericSet::Streamer(R__b);
      R__b >> fGeoSensNodes;
      R__b >> fGeoPassNodes;
      R__b.CheckByteCount(R__s, R__c, FairGeoPassivePar::IsA());
   } else {
      R__c = R__b.WriteVersion(FairGeoPassivePar::IsA(), kTRUE);
      FairParGenericSet::Streamer(R__b);
      R__b << fGeoSensNodes;
      R__b << fGeoPassNodes;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void FairGeoPassivePar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairGeoPassivePar.
      TClass *R__cl = ::FairGeoPassivePar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeoSensNodes", &fGeoSensNodes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeoPassNodes", &fGeoPassNodes);
      FairParGenericSet::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairGeoPassivePar(void *p) {
      return  p ? new(p) ::FairGeoPassivePar : new ::FairGeoPassivePar;
   }
   static void *newArray_FairGeoPassivePar(Long_t nElements, void *p) {
      return p ? new(p) ::FairGeoPassivePar[nElements] : new ::FairGeoPassivePar[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairGeoPassivePar(void *p) {
      delete ((::FairGeoPassivePar*)p);
   }
   static void deleteArray_FairGeoPassivePar(void *p) {
      delete [] ((::FairGeoPassivePar*)p);
   }
   static void destruct_FairGeoPassivePar(void *p) {
      typedef ::FairGeoPassivePar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairGeoPassivePar(TBuffer &buf, void *obj) {
      ((::FairGeoPassivePar*)obj)->::FairGeoPassivePar::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairGeoPassivePar

//______________________________________________________________________________
void FairPassiveContFact::Streamer(TBuffer &R__b)
{
   // Stream an object of class FairPassiveContFact.

   FairContFact::Streamer(R__b);
}

//______________________________________________________________________________
void FairPassiveContFact::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class FairPassiveContFact.
      TClass *R__cl = ::FairPassiveContFact::IsA();
      if (R__cl || R__insp.IsA()) { }
      FairContFact::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_FairPassiveContFact(void *p) {
      return  p ? new(p) ::FairPassiveContFact : new ::FairPassiveContFact;
   }
   static void *newArray_FairPassiveContFact(Long_t nElements, void *p) {
      return p ? new(p) ::FairPassiveContFact[nElements] : new ::FairPassiveContFact[nElements];
   }
   // Wrapper around operator delete
   static void delete_FairPassiveContFact(void *p) {
      delete ((::FairPassiveContFact*)p);
   }
   static void deleteArray_FairPassiveContFact(void *p) {
      delete [] ((::FairPassiveContFact*)p);
   }
   static void destruct_FairPassiveContFact(void *p) {
      typedef ::FairPassiveContFact current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_FairPassiveContFact(TBuffer &buf, void *obj) {
      ((::FairPassiveContFact*)obj)->::FairPassiveContFact::Streamer(buf);
   }
} // end of namespace ROOT for class ::FairPassiveContFact

/********************************************************
* /home/merz/BMN/GIT/trunk_220814/build/passive/G__PassiveDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableG__PassiveDict();

extern "C" void G__set_cpp_environmentG__PassiveDict() {
  G__cpp_reset_tagtableG__PassiveDict();
}
#include <new>
extern "C" int G__cpp_dllrevG__PassiveDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* FairCave */
static int G__G__PassiveDict_450_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairCave* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairCave((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairCave((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairCave((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) FairCave((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_FairCave));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_450_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairCave* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairCave[n];
     } else {
       p = new((void*) gvp) FairCave[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairCave;
     } else {
       p = new((void*) gvp) FairCave;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_FairCave));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_450_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairCave::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_450_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairCave::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_450_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairCave::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_450_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairCave::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_450_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairCave*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_450_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairCave::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_450_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairCave::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_450_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairCave::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_450_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairCave::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairCave G__TFairCave;
static int G__G__PassiveDict_450_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairCave*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairCave*) (soff+(sizeof(FairCave)*i)))->~G__TFairCave();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairCave*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairCave*) (soff))->~G__TFairCave();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoCave */
static int G__G__PassiveDict_465_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoCave* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoCave[n];
     } else {
       p = new((void*) gvp) FairGeoCave[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoCave;
     } else {
       p = new((void*) gvp) FairGeoCave;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoCave));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_465_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoCave::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_465_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoCave::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_465_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoCave::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_465_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoCave::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_465_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoCave*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_465_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoCave::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_465_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoCave::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_465_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoCave::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_465_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoCave::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoCave G__TFairGeoCave;
static int G__G__PassiveDict_465_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoCave*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoCave*) (soff+(sizeof(FairGeoCave)*i)))->~G__TFairGeoCave();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoCave*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoCave*) (soff))->~G__TFairGeoCave();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoMagnet */
static int G__G__PassiveDict_466_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoMagnet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoMagnet[n];
     } else {
       p = new((void*) gvp) FairGeoMagnet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoMagnet;
     } else {
       p = new((void*) gvp) FairGeoMagnet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoMagnet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_466_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoMagnet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_466_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoMagnet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_466_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoMagnet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_466_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoMagnet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_466_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoMagnet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_466_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoMagnet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_466_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoMagnet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_466_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoMagnet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_466_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoMagnet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoMagnet G__TFairGeoMagnet;
static int G__G__PassiveDict_466_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoMagnet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoMagnet*) (soff+(sizeof(FairGeoMagnet)*i)))->~G__TFairGeoMagnet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoMagnet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoMagnet*) (soff))->~G__TFairGeoMagnet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoPassivePar */
static int G__G__PassiveDict_502_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoPassivePar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoPassivePar(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) FairGeoPassivePar(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoPassivePar((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairGeoPassivePar((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoPassivePar((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) FairGeoPassivePar((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairGeoPassivePar[n];
       } else {
         p = new((void*) gvp) FairGeoPassivePar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new FairGeoPassivePar;
       } else {
         p = new((void*) gvp) FairGeoPassivePar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoPassivePar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_502_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoPassivePar*) G__getstructoffset())->GetGeoSensitiveNodes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_502_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((FairGeoPassivePar*) G__getstructoffset())->GetGeoPassiveNodes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_502_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoPassivePar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_502_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoPassivePar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_502_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoPassivePar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_502_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoPassivePar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_502_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoPassivePar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_502_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoPassivePar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_502_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoPassivePar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_502_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoPassivePar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_502_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoPassivePar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoPassivePar G__TFairGeoPassivePar;
static int G__G__PassiveDict_502_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoPassivePar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoPassivePar*) (soff+(sizeof(FairGeoPassivePar)*i)))->~G__TFairGeoPassivePar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoPassivePar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoPassivePar*) (soff))->~G__TFairGeoPassivePar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoPipe */
static int G__G__PassiveDict_503_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoPipe* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoPipe[n];
     } else {
       p = new((void*) gvp) FairGeoPipe[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoPipe;
     } else {
       p = new((void*) gvp) FairGeoPipe;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoPipe));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_503_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoPipe::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_503_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoPipe::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_503_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoPipe::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_503_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoPipe::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_503_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoPipe*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_503_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoPipe::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_503_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoPipe::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_503_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoPipe::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_503_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoPipe::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoPipe G__TFairGeoPipe;
static int G__G__PassiveDict_503_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoPipe*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoPipe*) (soff+(sizeof(FairGeoPipe)*i)))->~G__TFairGeoPipe();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoPipe*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoPipe*) (soff))->~G__TFairGeoPipe();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairGeoTarget */
static int G__G__PassiveDict_504_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairGeoTarget* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoTarget[n];
     } else {
       p = new((void*) gvp) FairGeoTarget[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairGeoTarget;
     } else {
       p = new((void*) gvp) FairGeoTarget;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoTarget));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_504_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairGeoTarget::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_504_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoTarget::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_504_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairGeoTarget::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_504_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairGeoTarget::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_504_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairGeoTarget*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_504_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoTarget::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_504_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoTarget::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_504_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairGeoTarget::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_504_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairGeoTarget::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairGeoTarget G__TFairGeoTarget;
static int G__G__PassiveDict_504_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairGeoTarget*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairGeoTarget*) (soff+(sizeof(FairGeoTarget)*i)))->~G__TFairGeoTarget();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairGeoTarget*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairGeoTarget*) (soff))->~G__TFairGeoTarget();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairMagnet */
static int G__G__PassiveDict_506_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairMagnet* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMagnet((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairMagnet((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMagnet((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) FairMagnet((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_FairMagnet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_506_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairMagnet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMagnet[n];
     } else {
       p = new((void*) gvp) FairMagnet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairMagnet;
     } else {
       p = new((void*) gvp) FairMagnet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_FairMagnet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_506_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairMagnet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_506_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairMagnet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_506_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairMagnet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_506_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairMagnet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_506_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairMagnet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_506_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairMagnet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_506_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairMagnet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_506_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairMagnet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_506_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairMagnet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairMagnet G__TFairMagnet;
static int G__G__PassiveDict_506_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairMagnet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairMagnet*) (soff+(sizeof(FairMagnet)*i)))->~G__TFairMagnet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairMagnet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairMagnet*) (soff))->~G__TFairMagnet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairPassiveContFact */
static int G__G__PassiveDict_509_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairPassiveContFact* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairPassiveContFact[n];
     } else {
       p = new((void*) gvp) FairPassiveContFact[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairPassiveContFact;
     } else {
       p = new((void*) gvp) FairPassiveContFact;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_FairPassiveContFact));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_509_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairPassiveContFact::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_509_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairPassiveContFact::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_509_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairPassiveContFact::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_509_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairPassiveContFact::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_509_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairPassiveContFact*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_509_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairPassiveContFact::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_509_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairPassiveContFact::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_509_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairPassiveContFact::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_509_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairPassiveContFact::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairPassiveContFact G__TFairPassiveContFact;
static int G__G__PassiveDict_509_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairPassiveContFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairPassiveContFact*) (soff+(sizeof(FairPassiveContFact)*i)))->~G__TFairPassiveContFact();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairPassiveContFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairPassiveContFact*) (soff))->~G__TFairPassiveContFact();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairPipe */
static int G__G__PassiveDict_510_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairPipe* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairPipe((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairPipe((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairPipe((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) FairPipe((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_FairPipe));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_510_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairPipe* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairPipe[n];
     } else {
       p = new((void*) gvp) FairPipe[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairPipe;
     } else {
       p = new((void*) gvp) FairPipe;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_FairPipe));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_510_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairPipe::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_510_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairPipe::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_510_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairPipe::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_510_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairPipe::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_510_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairPipe*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_510_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairPipe::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_510_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairPipe::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_510_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairPipe::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_510_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairPipe::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairPipe G__TFairPipe;
static int G__G__PassiveDict_510_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairPipe*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairPipe*) (soff+(sizeof(FairPipe)*i)))->~G__TFairPipe();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairPipe*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairPipe*) (soff))->~G__TFairPipe();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* FairTarget */
static int G__G__PassiveDict_511_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairTarget* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairTarget((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) FairTarget((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairTarget((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) FairTarget((const char*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_FairTarget));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_511_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   FairTarget* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairTarget[n];
     } else {
       p = new((void*) gvp) FairTarget[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new FairTarget;
     } else {
       p = new((void*) gvp) FairTarget;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__G__PassiveDictLN_FairTarget));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_511_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) FairTarget::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_511_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairTarget::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_511_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) FairTarget::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_511_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      FairTarget::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_511_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((FairTarget*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_511_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairTarget::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_511_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairTarget::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_511_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) FairTarget::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__G__PassiveDict_511_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) FairTarget::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef FairTarget G__TFairTarget;
static int G__G__PassiveDict_511_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (FairTarget*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((FairTarget*) (soff+(sizeof(FairTarget)*i)))->~G__TFairTarget();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (FairTarget*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((FairTarget*) (soff))->~G__TFairTarget();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* FairCave */

/* FairGeoCave */

/* FairGeoMagnet */

/* FairGeoPassivePar */

/* FairGeoPipe */

/* FairGeoTarget */

/* FairMagnet */

/* FairPassiveContFact */

/* FairPipe */

/* FairTarget */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncG__PassiveDict {
 public:
  G__Sizep2memfuncG__PassiveDict(): p(&G__Sizep2memfuncG__PassiveDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncG__PassiveDict::*p)();
};

size_t G__get_sizep2memfuncG__PassiveDict()
{
  G__Sizep2memfuncG__PassiveDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceG__PassiveDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__PassiveDictLN_FairCave))) {
     FairCave *G__Lderived;
     G__Lderived=(FairCave*)0x1000;
     {
       FairModule *G__Lpbase=(FairModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairCave),G__get_linked_tagnum(&G__G__PassiveDictLN_FairModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairCave),G__get_linked_tagnum(&G__G__PassiveDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairCave),G__get_linked_tagnum(&G__G__PassiveDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoCave))) {
     FairGeoCave *G__Lderived;
     G__Lderived=(FairGeoCave*)0x1000;
     {
       FairGeoSet *G__Lpbase=(FairGeoSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoCave),G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoCave),G__get_linked_tagnum(&G__G__PassiveDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoCave),G__get_linked_tagnum(&G__G__PassiveDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoMagnet))) {
     FairGeoMagnet *G__Lderived;
     G__Lderived=(FairGeoMagnet*)0x1000;
     {
       FairGeoSet *G__Lpbase=(FairGeoSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoMagnet),G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoMagnet),G__get_linked_tagnum(&G__G__PassiveDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoMagnet),G__get_linked_tagnum(&G__G__PassiveDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoPassivePar))) {
     FairGeoPassivePar *G__Lderived;
     G__Lderived=(FairGeoPassivePar*)0x1000;
     {
       FairParGenericSet *G__Lpbase=(FairParGenericSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoPassivePar),G__get_linked_tagnum(&G__G__PassiveDictLN_FairParGenericSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       FairParSet *G__Lpbase=(FairParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoPassivePar),G__get_linked_tagnum(&G__G__PassiveDictLN_FairParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoPassivePar),G__get_linked_tagnum(&G__G__PassiveDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoPassivePar),G__get_linked_tagnum(&G__G__PassiveDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoPipe))) {
     FairGeoPipe *G__Lderived;
     G__Lderived=(FairGeoPipe*)0x1000;
     {
       FairGeoSet *G__Lpbase=(FairGeoSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoPipe),G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoPipe),G__get_linked_tagnum(&G__G__PassiveDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoPipe),G__get_linked_tagnum(&G__G__PassiveDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoTarget))) {
     FairGeoTarget *G__Lderived;
     G__Lderived=(FairGeoTarget*)0x1000;
     {
       FairGeoSet *G__Lpbase=(FairGeoSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoTarget),G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoTarget),G__get_linked_tagnum(&G__G__PassiveDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoTarget),G__get_linked_tagnum(&G__G__PassiveDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__PassiveDictLN_FairMagnet))) {
     FairMagnet *G__Lderived;
     G__Lderived=(FairMagnet*)0x1000;
     {
       FairModule *G__Lpbase=(FairModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairMagnet),G__get_linked_tagnum(&G__G__PassiveDictLN_FairModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairMagnet),G__get_linked_tagnum(&G__G__PassiveDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairMagnet),G__get_linked_tagnum(&G__G__PassiveDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__PassiveDictLN_FairPassiveContFact))) {
     FairPassiveContFact *G__Lderived;
     G__Lderived=(FairPassiveContFact*)0x1000;
     {
       FairContFact *G__Lpbase=(FairContFact*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairPassiveContFact),G__get_linked_tagnum(&G__G__PassiveDictLN_FairContFact),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairPassiveContFact),G__get_linked_tagnum(&G__G__PassiveDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairPassiveContFact),G__get_linked_tagnum(&G__G__PassiveDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__PassiveDictLN_FairPipe))) {
     FairPipe *G__Lderived;
     G__Lderived=(FairPipe*)0x1000;
     {
       FairModule *G__Lpbase=(FairModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairPipe),G__get_linked_tagnum(&G__G__PassiveDictLN_FairModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairPipe),G__get_linked_tagnum(&G__G__PassiveDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairPipe),G__get_linked_tagnum(&G__G__PassiveDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__G__PassiveDictLN_FairTarget))) {
     FairTarget *G__Lderived;
     G__Lderived=(FairTarget*)0x1000;
     {
       FairModule *G__Lpbase=(FairModule*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairTarget),G__get_linked_tagnum(&G__G__PassiveDictLN_FairModule),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairTarget),G__get_linked_tagnum(&G__G__PassiveDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairTarget),G__get_linked_tagnum(&G__G__PassiveDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableG__PassiveDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__PassiveDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__PassiveDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__PassiveDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__G__PassiveDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__G__PassiveDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* FairCave */
static void G__setup_memvarFairCave(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairCave));
   { FairCave *p; p=(FairCave*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"world[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__PassiveDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoCave */
static void G__setup_memvarFairGeoCave(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoCave));
   { FairGeoCave *p; p=(FairGeoCave*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__G__PassiveDictLN_TString),-1,-1,2,"name=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__PassiveDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoMagnet */
static void G__setup_memvarFairGeoMagnet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoMagnet));
   { FairGeoMagnet *p; p=(FairGeoMagnet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,99,0,0,-1,-1,-1,2,"modName[2]=",0,"name of module");
   G__memvar_setup((void*)0,99,0,0,-1,-1,-1,2,"eleName[2]=",0,"substring for elements in module");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__PassiveDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoPassivePar */
static void G__setup_memvarFairGeoPassivePar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoPassivePar));
   { FairGeoPassivePar *p; p=(FairGeoPassivePar*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fGeoSensNodes)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__G__PassiveDictLN_TObjArray),-1,-1,1,"fGeoSensNodes=",0,"List of FairGeoNodes for sensitive volumes");
   G__memvar_setup((void*)((long)(&p->fGeoPassNodes)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__G__PassiveDictLN_TObjArray),-1,-1,1,"fGeoPassNodes=",0,"List of FairGeoNodes for sensitive volumes");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__PassiveDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoPipe */
static void G__setup_memvarFairGeoPipe(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoPipe));
   { FairGeoPipe *p; p=(FairGeoPipe*)0x1000; if (p) { }
   G__memvar_setup((void*)0,99,0,0,-1,-1,-1,2,"modName[2]=",0,"name of module");
   G__memvar_setup((void*)0,99,0,0,-1,-1,-1,2,"eleName[2]=",0,"substring for elements in module");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__PassiveDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairGeoTarget */
static void G__setup_memvarFairGeoTarget(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoTarget));
   { FairGeoTarget *p; p=(FairGeoTarget*)0x1000; if (p) { }
   G__memvar_setup((void*)0,99,0,0,-1,-1,-1,2,"modName[2]=",0,"name of module");
   G__memvar_setup((void*)0,99,0,0,-1,-1,-1,2,"eleName[2]=",0,"substring for elements in module");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__PassiveDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairMagnet */
static void G__setup_memvarFairMagnet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairMagnet));
   { FairMagnet *p; p=(FairMagnet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__PassiveDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairPassiveContFact */
static void G__setup_memvarFairPassiveContFact(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairPassiveContFact));
   { FairPassiveContFact *p; p=(FairPassiveContFact*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__PassiveDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairPipe */
static void G__setup_memvarFairPipe(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairPipe));
   { FairPipe *p; p=(FairPipe*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__PassiveDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* FairTarget */
static void G__setup_memvarFairTarget(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairTarget));
   { FairTarget *p; p=(FairTarget*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__G__PassiveDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarG__PassiveDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncFairCave(void) {
   /* FairCave */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairCave));
   G__memfunc_setup("FairCave",769,G__G__PassiveDict_450_0_1, 105, G__get_linked_tagnum(&G__G__PassiveDictLN_FairCave), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name C - - 10 '\"Exp Cave\"' Title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairCave",769,G__G__PassiveDict_450_0_2, 105, G__get_linked_tagnum(&G__G__PassiveDictLN_FairCave), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConstructGeometry",1809,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__PassiveDict_450_0_4, 85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairCave::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__PassiveDict_450_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairCave::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__PassiveDict_450_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairCave::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__PassiveDict_450_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairCave::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__PassiveDict_450_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__PassiveDict_450_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairCave::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__PassiveDict_450_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairCave::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__PassiveDict_450_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairCave::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__PassiveDict_450_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairCave::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairCave", 895, G__G__PassiveDict_450_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoCave(void) {
   /* FairGeoCave */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoCave));
   G__memfunc_setup("FairGeoCave",1052,G__G__PassiveDict_465_0_1, 105, G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoCave), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModuleName",1319,(G__InterfaceMethod) NULL,67, -1, -1, 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("read",412,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - - U 'FairGeoMedia' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("addRefNodes",1087,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("print",557,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__PassiveDict_465_0_7, 85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoCave::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__PassiveDict_465_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoCave::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__PassiveDict_465_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoCave::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__PassiveDict_465_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoCave::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__PassiveDict_465_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__PassiveDict_465_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoCave::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__PassiveDict_465_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoCave::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__PassiveDict_465_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoCave::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__PassiveDict_465_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoCave::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoCave", 1178, G__G__PassiveDict_465_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoMagnet(void) {
   /* FairGeoMagnet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoMagnet));
   G__memfunc_setup("FairGeoMagnet",1273,G__G__PassiveDict_466_0_1, 105, G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoMagnet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModuleName",1319,(G__InterfaceMethod) NULL,67, -1, -1, 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getEleName",983,(G__InterfaceMethod) NULL,67, -1, -1, 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__PassiveDict_466_0_4, 85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoMagnet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__PassiveDict_466_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoMagnet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__PassiveDict_466_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoMagnet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__PassiveDict_466_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoMagnet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__PassiveDict_466_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__PassiveDict_466_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoMagnet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__PassiveDict_466_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoMagnet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__PassiveDict_466_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoMagnet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__PassiveDict_466_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoMagnet::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoMagnet", 1399, G__G__PassiveDict_466_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoPassivePar(void) {
   /* FairGeoPassivePar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoPassivePar));
   G__memfunc_setup("FairGeoPassivePar",1691,G__G__PassiveDict_502_0_1, 105, G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoPassivePar), -1, 0, 3, 1, 1, 0, 
"C - - 10 '\"FairGeoPassivePar\"' name C - - 10 '\"Passive Geometry Parameters\"' title "
"C - - 10 '\"TestDefaultContext\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'FairParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'FairParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("GetGeoSensitiveNodes",2030,G__G__PassiveDict_502_0_5, 85, G__get_linked_tagnum(&G__G__PassiveDictLN_TObjArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetGeoPassiveNodes",1807,G__G__PassiveDict_502_0_6, 85, G__get_linked_tagnum(&G__G__PassiveDictLN_TObjArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairGeoPassivePar",1691,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoPassivePar), -1, 0, 1, 1, 4, 0, "u 'FairGeoPassivePar' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoPassivePar), -1, 1, 1, 1, 4, 0, "u 'FairGeoPassivePar' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__G__PassiveDict_502_0_9, 85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoPassivePar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__PassiveDict_502_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoPassivePar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__PassiveDict_502_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoPassivePar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__PassiveDict_502_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoPassivePar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__PassiveDict_502_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__PassiveDict_502_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoPassivePar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__PassiveDict_502_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoPassivePar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__PassiveDict_502_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoPassivePar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__PassiveDict_502_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoPassivePar::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoPassivePar", 1817, G__G__PassiveDict_502_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoPipe(void) {
   /* FairGeoPipe */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoPipe));
   G__memfunc_setup("FairGeoPipe",1067,G__G__PassiveDict_503_0_1, 105, G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoPipe), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModuleName",1319,(G__InterfaceMethod) NULL,67, -1, -1, 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getEleName",983,(G__InterfaceMethod) NULL,67, -1, -1, 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("create",628,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'FairGeoBuilder' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__PassiveDict_503_0_5, 85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoPipe::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__PassiveDict_503_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoPipe::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__PassiveDict_503_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoPipe::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__PassiveDict_503_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoPipe::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__PassiveDict_503_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__PassiveDict_503_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoPipe::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__PassiveDict_503_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoPipe::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__PassiveDict_503_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoPipe::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__PassiveDict_503_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoPipe::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoPipe", 1193, G__G__PassiveDict_503_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairGeoTarget(void) {
   /* FairGeoTarget */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoTarget));
   G__memfunc_setup("FairGeoTarget",1284,G__G__PassiveDict_504_0_1, 105, G__get_linked_tagnum(&G__G__PassiveDictLN_FairGeoTarget), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModuleName",1319,(G__InterfaceMethod) NULL,67, -1, -1, 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getEleName",983,(G__InterfaceMethod) NULL,67, -1, -1, 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__PassiveDict_504_0_4, 85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairGeoTarget::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__PassiveDict_504_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoTarget::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__PassiveDict_504_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairGeoTarget::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__PassiveDict_504_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairGeoTarget::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__PassiveDict_504_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__PassiveDict_504_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoTarget::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__PassiveDict_504_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoTarget::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__PassiveDict_504_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairGeoTarget::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__PassiveDict_504_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairGeoTarget::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairGeoTarget", 1410, G__G__PassiveDict_504_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairMagnet(void) {
   /* FairMagnet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairMagnet));
   G__memfunc_setup("FairMagnet",990,G__G__PassiveDict_506_0_1, 105, G__get_linked_tagnum(&G__G__PassiveDictLN_FairMagnet), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name C - - 10 '\"PND Magnet\"' Title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairMagnet",990,G__G__PassiveDict_506_0_2, 105, G__get_linked_tagnum(&G__G__PassiveDictLN_FairMagnet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConstructGeometry",1809,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ConstructASCIIGeometry",2170,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CheckIfSensitive",1607,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'string' - 0 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__PassiveDict_506_0_6, 85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairMagnet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__PassiveDict_506_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairMagnet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__PassiveDict_506_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairMagnet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__PassiveDict_506_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairMagnet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__PassiveDict_506_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__PassiveDict_506_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairMagnet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__PassiveDict_506_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairMagnet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__PassiveDict_506_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairMagnet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__PassiveDict_506_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairMagnet::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairMagnet", 1116, G__G__PassiveDict_506_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairPassiveContFact(void) {
   /* FairPassiveContFact */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairPassiveContFact));
   G__memfunc_setup("setAllContainers",1659,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairPassiveContFact",1903,G__G__PassiveDict_509_0_2, 105, G__get_linked_tagnum(&G__G__PassiveDictLN_FairPassiveContFact), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createContainer",1559,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__PassiveDictLN_FairParSet), -1, 0, 1, 1, 1, 0, "U 'FairContainer' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__PassiveDict_509_0_4, 85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairPassiveContFact::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__PassiveDict_509_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairPassiveContFact::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__PassiveDict_509_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairPassiveContFact::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__PassiveDict_509_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairPassiveContFact::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__PassiveDict_509_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__PassiveDict_509_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairPassiveContFact::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__PassiveDict_509_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairPassiveContFact::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__PassiveDict_509_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairPassiveContFact::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__PassiveDict_509_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairPassiveContFact::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairPassiveContFact", 2029, G__G__PassiveDict_509_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairPipe(void) {
   /* FairPipe */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairPipe));
   G__memfunc_setup("FairPipe",784,G__G__PassiveDict_510_0_1, 105, G__get_linked_tagnum(&G__G__PassiveDictLN_FairPipe), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name C - - 10 '\"PND Pipe\"' Title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairPipe",784,G__G__PassiveDict_510_0_2, 105, G__get_linked_tagnum(&G__G__PassiveDictLN_FairPipe), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConstructGeometry",1809,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__PassiveDict_510_0_4, 85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairPipe::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__PassiveDict_510_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairPipe::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__PassiveDict_510_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairPipe::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__PassiveDict_510_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairPipe::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__PassiveDict_510_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__PassiveDict_510_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairPipe::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__PassiveDict_510_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairPipe::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__PassiveDict_510_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairPipe::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__PassiveDict_510_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairPipe::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairPipe", 910, G__G__PassiveDict_510_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncFairTarget(void) {
   /* FairTarget */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__G__PassiveDictLN_FairTarget));
   G__memfunc_setup("FairTarget",1001,G__G__PassiveDict_511_0_1, 105, G__get_linked_tagnum(&G__G__PassiveDictLN_FairTarget), -1, 0, 2, 1, 1, 0, 
"C - - 10 - name C - - 10 '\"PND Target\"' Title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FairTarget",1001,G__G__PassiveDict_511_0_2, 105, G__get_linked_tagnum(&G__G__PassiveDictLN_FairTarget), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ConstructGeometry",1809,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__G__PassiveDict_511_0_4, 85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&FairTarget::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__G__PassiveDict_511_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairTarget::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__G__PassiveDict_511_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&FairTarget::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__G__PassiveDict_511_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&FairTarget::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__G__PassiveDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__G__PassiveDict_511_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__G__PassiveDict_511_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairTarget::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__G__PassiveDict_511_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairTarget::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__G__PassiveDict_511_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&FairTarget::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__G__PassiveDict_511_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&FairTarget::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~FairTarget", 1127, G__G__PassiveDict_511_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncG__PassiveDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalG__PassiveDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcG__PassiveDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__G__PassiveDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR = { "basic_fstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__G__PassiveDictLN_FairModule = { "FairModule" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_FairCave = { "FairCave" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_FairGeoMedia = { "FairGeoMedia" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_FairGeoBuilder = { "FairGeoBuilder" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_FairGeoSet = { "FairGeoSet" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_FairGeoCave = { "FairGeoCave" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_FairGeoMagnet = { "FairGeoMagnet" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_FairParSet = { "FairParSet" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_FairParamList = { "FairParamList" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_FairParGenericSet = { "FairParGenericSet" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_FairGeoPassivePar = { "FairGeoPassivePar" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_FairGeoPipe = { "FairGeoPipe" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_FairGeoTarget = { "FairGeoTarget" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_FairMagnet = { "FairMagnet" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_FairContainer = { "FairContainer" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_FairContFact = { "FairContFact" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_FairPassiveContFact = { "FairPassiveContFact" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_FairPipe = { "FairPipe" , 99 , -1 };
G__linked_taginfo G__G__PassiveDictLN_FairTarget = { "FairTarget" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableG__PassiveDict() {
  G__G__PassiveDictLN_TClass.tagnum = -1 ;
  G__G__PassiveDictLN_TBuffer.tagnum = -1 ;
  G__G__PassiveDictLN_TMemberInspector.tagnum = -1 ;
  G__G__PassiveDictLN_TObject.tagnum = -1 ;
  G__G__PassiveDictLN_TNamed.tagnum = -1 ;
  G__G__PassiveDictLN_TString.tagnum = -1 ;
  G__G__PassiveDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__G__PassiveDictLN_string.tagnum = -1 ;
  G__G__PassiveDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__G__PassiveDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__PassiveDictLN_TObjArray.tagnum = -1 ;
  G__G__PassiveDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__G__PassiveDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__G__PassiveDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__G__PassiveDictLN_FairModule.tagnum = -1 ;
  G__G__PassiveDictLN_FairCave.tagnum = -1 ;
  G__G__PassiveDictLN_FairGeoMedia.tagnum = -1 ;
  G__G__PassiveDictLN_FairGeoBuilder.tagnum = -1 ;
  G__G__PassiveDictLN_FairGeoSet.tagnum = -1 ;
  G__G__PassiveDictLN_FairGeoCave.tagnum = -1 ;
  G__G__PassiveDictLN_FairGeoMagnet.tagnum = -1 ;
  G__G__PassiveDictLN_FairParSet.tagnum = -1 ;
  G__G__PassiveDictLN_FairParamList.tagnum = -1 ;
  G__G__PassiveDictLN_FairParGenericSet.tagnum = -1 ;
  G__G__PassiveDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__G__PassiveDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__G__PassiveDictLN_FairGeoPassivePar.tagnum = -1 ;
  G__G__PassiveDictLN_FairGeoPipe.tagnum = -1 ;
  G__G__PassiveDictLN_FairGeoTarget.tagnum = -1 ;
  G__G__PassiveDictLN_FairMagnet.tagnum = -1 ;
  G__G__PassiveDictLN_FairContainer.tagnum = -1 ;
  G__G__PassiveDictLN_FairContFact.tagnum = -1 ;
  G__G__PassiveDictLN_FairPassiveContFact.tagnum = -1 ;
  G__G__PassiveDictLN_FairPipe.tagnum = -1 ;
  G__G__PassiveDictLN_FairTarget.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableG__PassiveDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_TString);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_string);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_FairModule);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_FairCave),sizeof(FairCave),-1,324864,"PNDCaveSD",G__setup_memvarFairCave,G__setup_memfuncFairCave);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_FairGeoMedia);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_FairGeoBuilder);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_FairGeoSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_FairGeoCave),sizeof(FairGeoCave),-1,62720,"Class for the geometry of CAVE",G__setup_memvarFairGeoCave,G__setup_memfuncFairGeoCave);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_FairGeoMagnet),sizeof(FairGeoMagnet),-1,62720,"Class for the geometry of Magnet",G__setup_memvarFairGeoMagnet,G__setup_memfuncFairGeoMagnet);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_FairParSet);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_FairParamList);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_FairParGenericSet);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_TVectorTlEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_FairGeoPassivePar),sizeof(FairGeoPassivePar),-1,65280,(char*)NULL,G__setup_memvarFairGeoPassivePar,G__setup_memfuncFairGeoPassivePar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_FairGeoPipe),sizeof(FairGeoPipe),-1,62720,"Class for geometry of beam pipe",G__setup_memvarFairGeoPipe,G__setup_memfuncFairGeoPipe);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_FairGeoTarget),sizeof(FairGeoTarget),-1,62720,"Class for geometry of Target",G__setup_memvarFairGeoTarget,G__setup_memfuncFairGeoTarget);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_FairMagnet),sizeof(FairMagnet),-1,324864,"PNDMagnet",G__setup_memvarFairMagnet,G__setup_memfuncFairMagnet);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_FairContainer);
   G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_FairContFact);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_FairPassiveContFact),sizeof(FairPassiveContFact),-1,62720,"Factory for all Passive parameter containers",G__setup_memvarFairPassiveContFact,G__setup_memfuncFairPassiveContFact);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_FairPipe),sizeof(FairPipe),-1,324864,"PNDPIPE",G__setup_memvarFairPipe,G__setup_memfuncFairPipe);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__G__PassiveDictLN_FairTarget),sizeof(FairTarget),-1,324864,(char*)NULL,G__setup_memvarFairTarget,G__setup_memfuncFairTarget);
}
extern "C" void G__cpp_setupG__PassiveDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupG__PassiveDict()");
  G__set_cpp_environmentG__PassiveDict();
  G__cpp_setup_tagtableG__PassiveDict();

  G__cpp_setup_inheritanceG__PassiveDict();

  G__cpp_setup_typetableG__PassiveDict();

  G__cpp_setup_memvarG__PassiveDict();

  G__cpp_setup_memfuncG__PassiveDict();
  G__cpp_setup_globalG__PassiveDict();
  G__cpp_setup_funcG__PassiveDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncG__PassiveDict();
  return;
}
class G__cpp_setup_initG__PassiveDict {
  public:
    G__cpp_setup_initG__PassiveDict() { G__add_setup_func("G__PassiveDict",(G__incsetup)(&G__cpp_setupG__PassiveDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initG__PassiveDict() { G__remove_setup_func("G__PassiveDict"); }
};
G__cpp_setup_initG__PassiveDict G__cpp_setup_initializerG__PassiveDict;

